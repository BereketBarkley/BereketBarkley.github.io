<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <title>
    <%=name%>
  </title>
  <meta name="author" content="You">
  <meta name="description" content="A compendium of Harry Potter characters">
  <meta content="text/html" http-equiv="Content-type" />
  <meta content="width=device-width, initial-scale=1" name="viewport" />
  <link rel="stylesheet" href="styles.css">
  <script src="https://d3js.org/d3.v6.js"></script>
</head>

<body>
  <%- include ('global/nav'); %>

    <header>
      <h1>
        <%=name%>
      </h1>
    </header>
    <section id="charcter-stats">
      <h2>Stats</h2>
      <div id="my_dataviz"></div>
      <ul>
        <li>Native American: <%=stats["Native American"]%>
        </li>
        <li>Asian: <%=stats.Asian%>
        </li>
        <li>Black: <%=stats.Black%>
        </li>
        <li>LatinX: <%=stats.LatinX%>
        </li>
        <li>White: <%=stats.White%>
        </li>
        <li>Multi-Racial: <%=stats["Multi-Racial"]%>
        </li>
        <li>Unknown: <%=stats.Unknown%>
        </li>
      </ul>
    </section>
    <span id='variableJSON' hidden>
      <%= JSON.stringify(stats); %>
    </span>
    <script>
      var stats = JSON.parse($('#variableJSON').text());
      $('#variableJSON').remove();
      // console.log(stats);

      // set the dimensions and margins of the graph
      const width = 500,
        height = 500,
        margin = 40;

      // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
      const radius = Math.min(width, height) / 2 - margin

      // append the svg object to the div called 'my_dataviz'
      const svg = d3.select("#my_dataviz")
        .append("svg")
        .attr("width", width + 500)
        .attr("height", height)

      // const g = svg.append("g")

      const pieG = svg
        .append("g")
        .attr("transform", `translate(${width / 2}, ${height / 2})`);


      // Create dummy data
      const data = {
        "Native American": stats["Native American"],
        Asian: stats["Asian"],
        Black: stats["Black"],
        LatinX: stats["LatinX"],
        White: stats["White"],
        "Multi-Racial": stats["Multi-Racial"],
        Unknown: stats["Unknown"]
      }

      // set the color scale
      const color = d3.scaleOrdinal()
        .range(d3.schemeSet2);

      // Compute the position of each group on the pie:
      const pie = d3.pie()
        .value(function (d) { return d[1] })
      const data_ready = pie(Object.entries(data))
      // Now I know that group A goes from 0 degrees to x degrees and so on.

      // shape helper to build arcs:
      const arcGenerator = d3.arc()
        .innerRadius(0)
        .outerRadius(radius)

      // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
      pieG
        .selectAll('mySlices')
        .data(data_ready)
        .join('path')
        .attr('d', arcGenerator)
        .attr('fill', function (d) { return (color(d.data[0])) })
        .attr("stroke", "black")
        .style("stroke-width", "2px")
        .style("opacity", 0.7)

      // Now add the annotation. Use the centroid method to get the best coordinates
      // pieG
      //   .selectAll('mySlices')
      //   .data(data_ready)
      //   .join('text')
      //   .text(function (d) {
      //     if (d.data[1] > 0) {
      //       // console.log("d.data[1]", d.data[1]);
      //       return d.data[0];
      //     }
      //     return "";
      //   })
      //   .attr("transform", function (d, i) { return `translate(${arcGenerator.centroid(d) + i})` })
      //   .style("text-anchor", "middle")
      //   .style("font-size", 12)


      const labelHeight = 18;
      const legendG = svg.append("g")
        .attr("transform", function (d) {
          return "translate(600, 50)";
        })

      legendG
        .selectAll(null)
        .data(data_ready)
        .enter()
        .append('rect')
        .attr('y', d => labelHeight * d.index * 1.8)
        .attr('width', labelHeight)
        .attr('height', labelHeight)
        .attr('fill', d => color(d.data[0]))
        .attr('stroke', 'grey')
        .style('stroke-width', '1px');

      legendG
        .selectAll(null)
        .data(data_ready)
        .enter()
        .append('text')
        .text(function (d) {
          return d.data[0] + " (" + d.data[1] + ")"
        })
        .attr('x', labelHeight * 1.2)
        .attr('y', d => labelHeight * d.index * 1.8 + labelHeight)
        .style('font-family', 'sans-serif')
        .style('font-size', `${labelHeight}px`);
    </script>
</body>

</html>